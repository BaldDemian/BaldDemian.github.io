<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>享元模式</title>
    <link href="/2022/05/27/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/27/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="站在巨人的肩膀上"><a class="header-anchor" href="#站在巨人的肩膀上">¶</a>站在巨人的肩膀上</h2><p>在大名鼎鼎的GoF(Gang of Four)的&quot;Design Patterns: Elements of Reusable Object-Oriented Software&quot;<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Gamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides(四人被合称为&quot;Gang of Four&quot;). 1995.Design Patterns: Elements of Reusable Object-Oriented Software. Reading, MA: Addison-Wesley. ISBN: 0321349601.">[1]</span></a></sup>一书中，对于享元模式(<strong>flyweight pattern</strong>)的描述是这样的：</p><blockquote><p>Use sharing to support large numbers of fine-grained objects efficiently.</p></blockquote><p>即“共享大量细粒度的对象以提高效率”</p><p>下面用<strong>超级马里奥</strong>来进一步说明享元模式。</p><h2 id="超级马里奥中的玄机"><a class="header-anchor" href="#超级马里奥中的玄机">¶</a>超级马里奥中的玄机</h2><p>也许你从来没有注意过（或者像我一样从来没有玩过）最早的超级马里奥游戏中的云和草：</p><p><img src="/img/super-mario.png" alt=""></p><p>它们竟然只是颜色不一样而已！</p><p>游戏中这么多的云和草，如果为每一个都创建一个新的对象，对于那个年代的红白机的内存来说是不现实的。</p><p>这里的云和草就符合“大量的细粒度的对象“的定义，于是根据享元模式的理念，我们考虑为云和草各自仅创建一个<strong>实例</strong>(instance)，在程序需要时<strong>复用</strong>（即共享）这两个实例。看到这里，如何实现<strong>控制实例的创建</strong>呢？聪明的<s>我</s>你肯定想到了，这不就是工厂模式嘛！</p><p>——是的，享元模式经常配合工厂模式使用。</p><h2 id="UML"><a class="header-anchor" href="#UML">¶</a>UML</h2><p>这是四人帮那部大名鼎鼎的设计模式一书中享元模式的类图，下面我们来分析：</p><p><img src="/img/flyweight-uml.jpg" alt=""></p><ul><li><code>Client</code>: 用户代码，即想要使用享元的代码，它向<code>FlywightFactory</code>申请返回想要的对象</li><li><code>FlyweightFactory</code>: 享元工厂，控制实例的创建，内部维护一个<strong>享元池</strong>，池子中的对象均是实现了<code>Flyweight</code>接口的具体享元(即<code>ConcreteFlyweight</code>)。享元池一般用<code>map</code>实现，实例详见下面的代码示例</li><li>享元工厂、享元池、其中的具体享元、客户代码之间的关系是这样的：（同样来自GoF的那本书）</li></ul><p><img src="/img/flyweight-process.jpg" alt=""></p><ul><li><code>UnsharedConcreteFlyweight</code>: 这个用官方定义来解释吧：</li></ul><blockquote><p>not all Flyweight subclasses need to be shared. The Flyweight interface enables sharing; it doesn’t enforce it. It’s common for UnsharedConcreteFlyweight objects to have ConcreteFlyweight objects as children at some level in the flyweight object structure (as the Row and Column classes have)</p></blockquote><p>即非共享享元派生自享元接口，具体享元可以继承自某个非共享享元。</p><ul><li><p>此外还需要注意一点，各个享元有<strong>内部状态</strong>（intrinsic state）和<strong>外部状态</strong>（extrinsic state）</p><ul><li>内部状态：</li></ul><blockquote><p>“Intrinsic state is stored in the ConcreteFlyweight object.”</p><p>即每个享元内部的属性，通常来说是不可变的</p></blockquote><ul><li>外部状态：</li></ul><blockquote><p>“Extrinsic state is stored or computed by Client objects.”</p><p>可以理解为客户代码传入的参数</p></blockquote></li></ul><p>下面结合代码进一步理解</p><h2 id="云和草"><a class="header-anchor" href="#云和草">¶</a>云和草</h2><p>下面尝试用享元模式实现上面提到的云和草：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<br>    WHITE, GREEN;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Flyweight</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">block</span><span class="hljs-params">()</span>;<br>    <span class="hljs-comment">// 也许云和雨都可以有一个“阻挡”方法？？？</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cloud</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Flyweight</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Color</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> Color.WHITE;<br>    <span class="hljs-comment">// color就是cloud的一个内部的不可变属性</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">block</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// do something...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bush</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Flyweight</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Color</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> Color.GREEN;<br>    <span class="hljs-comment">// color是clound内部的一个不可变的属性</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">block</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// do something...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 工厂类，client仅能与工厂进行交互</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlyweightFactory</span> &#123;<br>    <span class="hljs-comment">// 享元池，一般用map实现</span><br>    <span class="hljs-comment">// 享元池也可以预先填入一些享元，类似于单例模式中的饿汉和懒汉</span><br>    <span class="hljs-keyword">private</span> staic HashMap&lt;String, Flyweight&gt; pool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Flyweight <span class="hljs-title function_">getFlyweight</span> <span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-comment">// 参数列表中的type由客户代码提供，可以看作是享元的外部属性</span><br>        <span class="hljs-type">Flyweight</span> <span class="hljs-variable">flyweight</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.pool.get(type);<br>        <span class="hljs-keyword">if</span> (type == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// Map.find()找不到对应的value，会返回null</span><br>            <span class="hljs-comment">// 创建享元</span><br>            <span class="hljs-keyword">switch</span> type &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;cloud&quot;</span>:<br>                    flyweight = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cloud</span>();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;bush&quot;</span>:<br>                    flyweight = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bush</span>();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-comment">// do something...</span><br>            &#125;<br>            <span class="hljs-comment">// 将享元加入pool</span><br>            <span class="hljs-built_in">this</span>.pool.put(type, flyweight);<br>        &#125;<br>        <span class="hljs-keyword">return</span> flyweight;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 客户代码</span><br>    <span class="hljs-type">Flyweight</span> <span class="hljs-variable">flyweight</span> <span class="hljs-operator">=</span> FlyweightFactory.getFlyweight(<span class="hljs-string">&quot;cloud&quot;</span>);<br>    flyweight.block();<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2><p>享元模式类似于维护了多个唯一实例的单例模式。</p><p>另外，对于何时使用享元模式，四人帮提出了如下建议：</p><blockquote><p>It’s often best to implement State (305) and Strategy (315) objects as flyweights.</p></blockquote><h2 id="杂七杂八"><a class="header-anchor" href="#杂七杂八">¶</a>杂七杂八</h2><ul><li>初始享元模式是在看<em>Effective Java</em>中遇到的。大二了才第一次阅读原版技术书，<s>实在是愧对我四六级满分阅读的水平</s></li><li>然后去看了这本<a href="https://leetcode.cn/leetbook/detail/design-patterns/">LeetBook</a>，用超级马里奥解释享元模式的点子来自于这本书的作者，感谢启发！</li><li>作为一个名词癖患者，很好奇<code>flyweight</code>这个词的来源，查了一下是拳击里面的术语，即<code>蝇量级</code>，也可以理解为<code>轻型</code>。然而还是无法理解为什么去这个名字。看了一圈貌似是“节省内存所以轻量”的意思？倒是中文译名“享元”有点信达雅</li><li>算是第一篇严肃意义上的技术博客？无视期末复习进度和几个DDL来写，又是一种从来没有体会到的愉悦</li><li><s>软工II设计模式题就考享元模式吧</s>🙏</li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Gamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides(四人被合称为&quot;Gang of Four&quot;). 1995.Design Patterns: Elements of Reusable Object-Oriented Software. Reading, MA: Addison-Wesley. ISBN: 0321349601.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B树和B+树</title>
    <link href="/2022/05/27/B%E6%A0%91%E5%92%8CB+%E6%A0%91/"/>
    <url>/2022/05/27/B%E6%A0%91%E5%92%8CB+%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<blockquote><p>施工中：B树的增加删除查找节点的代码</p><p>某些不同的教材对于B树和B+树的定义与性质在一些细微处存在区别。本文按照王道论坛的《数据结构考研复习指导》。这本书中对于B树的定义有一个很大的不同就是引入了“终端节点”和“失败节点”：失败节点是叶子节点，终端节点是叶子节点的上一层。但是对于B树的各种计算中不包含失败节点</p></blockquote><h2 id="B树"><a class="header-anchor" href="#B树">¶</a>B树</h2><p><img src="/img/B-tree.png" alt="B树"></p><p>B树，即多路平衡查找树。先来从这个名字（B树的创造者没有解释&quot;B&quot;的由来。有人推测是&quot;balanced&quot;，还有的说是&quot;Boeing&quot;，因为这个数据结构是于他们在波音实验室中工作期间发明的）入手：B树的一个节点中的<strong>关键字</strong>可以有<img src="https://math.now.sh?inline=n" style="display:inline-block;margin: 0;"/>个，那这个节点的子节点的数量就是<img src="https://math.now.sh?inline=n%2B1" style="display:inline-block;margin: 0;"/>个，因此是<strong>多路</strong>的；B树是<strong>平衡</strong>树，且它的每个节点的平衡因子为0。</p><p>B树的所有节点的最大的子节点个数称为<strong>B树的阶</strong>(order)。如上图的B树的阶就是5。一个<img src="https://math.now.sh?inline=m" style="display:inline-block;margin: 0;"/>阶的B树具有以下的性质：</p><ol><li>每个节点中的各个关键字以升序排列</li><li>每一个非根非叶节点都含有<img src="https://math.now.sh?inline=k" style="display:inline-block;margin: 0;"/>个子节点和<img src="https://math.now.sh?inline=k-1" style="display:inline-block;margin: 0;"/>个关键字，其中<img src="https://math.now.sh?inline=%5Clceil%20m%2F2%20%5Crceil%3C%3Dk%3C%3Dm" style="display:inline-block;margin: 0;"/></li><li>若根节点不是终端节点，则至少含有2个子树</li><li>所有的终端节点都位于同一层，所有叶子节点都位于同一层</li></ol><h3 id="性质推导"><a class="header-anchor" href="#性质推导">¶</a>性质推导</h3><p>B树中的大部分操作都是用于外存的，且对磁盘的存取次数与B树的高度成正比。下面对于高度的定义中忽略叶子节点层（失败节点层）</p><p>一个含有<img src="https://math.now.sh?inline=n" style="display:inline-block;margin: 0;"/>个关键字，阶为<img src="https://math.now.sh?inline=m" style="display:inline-block;margin: 0;"/>的B树的最大高度和最小高度是多少？</p><ul><li>最小高度</li></ul><p>要使得B树的高度最小，那么每个节点要尽可能地塞满，即每个节点都有<img src="https://math.now.sh?inline=m-1" style="display:inline-block;margin: 0;"/>个关键字，也即每个节点都有<img src="https://math.now.sh?inline=m" style="display:inline-block;margin: 0;"/>个子节点。</p><p>对于第0层（根所在的层），有1个节点；</p><p>第1层有<img src="https://math.now.sh?inline=m" style="display:inline-block;margin: 0;"/>个节点；</p><p>第2层有<img src="https://math.now.sh?inline=m%5E2" style="display:inline-block;margin: 0;"/>个节点；</p><p>则<img src="https://math.now.sh?inline=h" style="display:inline-block;margin: 0;"/>层共有<br><img src="https://math.now.sh?inline=m%5E0%20%2B%20m%5E1%20%2B%20...%2B%20m%5E%7Bh-1%7D%20%3D%20%28m%5Eh%20-%201%29%20%2F%20(m%20-%201)" style="display:inline-block;margin: 0;"/>个节点，这些节点中都有<img src="https://math.now.sh?inline=m-1" style="display:inline-block;margin: 0;"/>个关键字。则一共有</p><p><img src="https://math.now.sh?inline=%28m-1%29%20*%20((m%5Eh%20-%201)%20%2F%20(m%20-%201))%20%3D%20m%5Eh%20-%201" style="display:inline-block;margin: 0;"/>个关键字。则又有：</p><p><img src="https://math.now.sh?inline=%28m%5Eh%20-%201%29%20%3E%3D%20n" style="display:inline-block;margin: 0;"/>，变形得到<img src="https://math.now.sh?inline=n%20%3E%3D%20%5Clog_m%20%7Bn%2B1%7D" style="display:inline-block;margin: 0;"/>，即含有<img src="https://math.now.sh?inline=n" style="display:inline-block;margin: 0;"/>个关键字阶为<img src="https://math.now.sh?inline=m" style="display:inline-block;margin: 0;"/>的B树的最小高度为<img src="https://math.now.sh?inline=%5Clog_m%7Bn%2B1%7D" style="display:inline-block;margin: 0;"/></p><ul><li>最大高度</li></ul><p>要使得B树的高度最大，那么每个节点要尽可能地塞不满，但是由于B树的性质规定了每个非根节点中的子节点数最少为<img src="https://math.now.sh?inline=%5Clceil%20m%2F2%20%5Crceil" style="display:inline-block;margin: 0;"/>个。记为<img src="https://math.now.sh?inline=k" style="display:inline-block;margin: 0;"/></p><p>第0层有1个节点；</p><p>第1层有2个节点；</p><p>第2层有<img src="https://math.now.sh?inline=2k" style="display:inline-block;margin: 0;"/>个节点;</p><p>则<img src="https://math.now.sh?inline=h%2B1" style="display:inline-block;margin: 0;"/>层（叶子节点层，即失败节点层，但是计算高度时不算这一层）共有<img src="https://math.now.sh?inline=2k%5E%7Bh-1%7D" style="display:inline-block;margin: 0;"/>个节点。</p><p><strong>我们知道有<img src="https://math.now.sh?inline=n" style="display:inline-block;margin: 0;"/>个关键字的B树，失败节点的个数其实就是<img src="https://math.now.sh?inline=n%2B1" style="display:inline-block;margin: 0;"/>个</strong>。所以有</p><p><img src="https://math.now.sh?inline=n%2B1%3E%3D2k%5E%7Bh-1%7D" style="display:inline-block;margin: 0;"/>，变形得到<img src="https://math.now.sh?inline=h%20%3C%3D%20%5Clog_k%20%7B%28n%2B1%29%2F2%20%2B%201%7D" style="display:inline-block;margin: 0;"/></p><h2 id="B-树"><a class="header-anchor" href="#B-树">¶</a>B+树</h2><p>B+树主要用于数据库，是对B树的一种变体。</p><p>叶子节点中的每个关键字就是数据库中的<strong>索引</strong>，它还持有相应记录（元组）的指针</p><p><img src="/img/B+-tree.png" alt="B+树"></p><p>B+树的所有节点的关键字的最大数目称为B+树的阶（同时也是节点的最大子节点数），它具有如下性质：</p><ol><li>每个分支节点最多有<img src="https://math.now.sh?inline=m" style="display:inline-block;margin: 0;"/>棵子树</li><li>非叶根节点至少有2根子树，其他分支节点最少有<img src="https://math.now.sh?inline=%5Clceil%20m%2F2%20%5Crceil" style="display:inline-block;margin: 0;"/>个子树</li><li>每个节点的关键字数目和子树数目<strong>相同</strong></li><li>所有叶子节点包含全部关键字及指向相应记录的指针，叶子节点中关键字的大小依次升序排列，并且相邻叶子节点有指向下一个叶子节点的指针</li><li>分支节点中的每个关键字是其子树中的最大关键字的<strong>副本</strong>。B+树的叶子节点包含全部的关键字及指向对应<strong>记录</strong>的指针，所有非叶节点仅起到索引作用，即索引的索引</li></ol>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>施工中</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/27/hello-world/"/>
    <url>/2022/05/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p><s>这篇文章出现在这里的唯一原因是<code>hexo s</code>时<code>_posts</code>目录下没有文章会报错</s></p><span id="more"></span><p>正如同初学所有编程语言时，都会以打印出<code>Hello World</code>为开始，这篇<code>Hello World</code>出现在这里也作为我博客创建的一点注脚</p><p>但也许我已经失去了可以对这个世界好奇地发出&quot;Hello&quot;的心力与热情。那就让代码替我发出吧</p><p>鉴于最近在努力当一名<code>Rustacean</code>（谁知道呢，三个星期前还因为初学<code>Go</code>时的行云流水而想成为<code>gopher</code>，也许我凡事三分钟热度的性格缺陷，最后只想成为一名<code>loser</code>），CV一段<code>Rust</code>的<code>Hello World</code>吧</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Hello, world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后附一段看<em>Effective Java</em>第一章很喜欢的一句话：</p><p>“Learning the art of programming, like most other disciplines, consists of first learning the rules and then learning when to break them.”</p><p>Surviving期末中</p><p>End.</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
